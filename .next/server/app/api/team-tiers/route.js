"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/team-tiers/route";
exports.ids = ["app/api/team-tiers/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fteam-tiers%2Froute&page=%2Fapi%2Fteam-tiers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fteam-tiers%2Froute.ts&appDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fteam-tiers%2Froute&page=%2Fapi%2Fteam-tiers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fteam-tiers%2Froute.ts&appDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_arnav_Documents_FF_Metrics_src_app_api_team_tiers_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/team-tiers/route.ts */ \"(rsc)/./src/app/api/team-tiers/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/team-tiers/route\",\n        pathname: \"/api/team-tiers\",\n        filename: \"route\",\n        bundlePath: \"app/api/team-tiers/route\"\n    },\n    resolvedPagePath: \"/Users/arnav/Documents/FF Metrics/src/app/api/team-tiers/route.ts\",\n    nextConfigOutput,\n    userland: _Users_arnav_Documents_FF_Metrics_src_app_api_team_tiers_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/team-tiers/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjMyX3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGdGVhbS10aWVycyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGVhbS10aWVycyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnRlYW0tdGllcnMlMkZyb3V0ZS50cyZhcHBEaXI9JTJGVXNlcnMlMkZhcm5hdiUyRkRvY3VtZW50cyUyRkZGJTIwTWV0cmljcyUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZhcm5hdiUyRkRvY3VtZW50cyUyRkZGJTIwTWV0cmljcyZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDaUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYW50YXN5LWRhc2hib2FyZC8/ZmU0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvYXJuYXYvRG9jdW1lbnRzL0ZGIE1ldHJpY3Mvc3JjL2FwcC9hcGkvdGVhbS10aWVycy9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdGVhbS10aWVycy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RlYW0tdGllcnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3RlYW0tdGllcnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvYXJuYXYvRG9jdW1lbnRzL0ZGIE1ldHJpY3Mvc3JjL2FwcC9hcGkvdGVhbS10aWVycy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdGVhbS10aWVycy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fteam-tiers%2Froute&page=%2Fapi%2Fteam-tiers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fteam-tiers%2Froute.ts&appDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/team-tiers/route.ts":
/*!*****************************************!*\
  !*** ./src/app/api/team-tiers/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_sleeper_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/sleeper/api */ \"(rsc)/./src/lib/sleeper/api.ts\");\n/* harmony import */ var _lib_player_matching_matcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/player-matching/matcher */ \"(rsc)/./src/lib/player-matching/matcher.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const { leagueId, draftAnalysisData } = await request.json();\n        if (!leagueId || !draftAnalysisData) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"League ID and draft analysis data are required\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Team tiers API called with leagueId:\", leagueId);\n        console.log(\"Draft analysis data available:\", !!draftAnalysisData);\n        console.log(\"MockoSheet data length:\", draftAnalysisData.mockoSheetData?.length || 0);\n        // Get rosters, users, and players from Sleeper\n        console.log(\"Fetching data from Sleeper API...\");\n        const [rosters, users, players] = await Promise.all([\n            _lib_sleeper_api__WEBPACK_IMPORTED_MODULE_1__.sleeperAPI.getRosters(leagueId),\n            _lib_sleeper_api__WEBPACK_IMPORTED_MODULE_1__.sleeperAPI.getUsers(leagueId),\n            _lib_sleeper_api__WEBPACK_IMPORTED_MODULE_1__.sleeperAPI.getPlayers()\n        ]);\n        console.log(\"Sleeper data fetched:\", {\n            rosters: rosters?.length || 0,\n            users: users?.length || 0,\n            players: players ? Object.keys(players).length : 0\n        });\n        // Create a map of roster_id to team name\n        const rosterToTeamMap = new Map();\n        rosters.forEach((roster)=>{\n            const user = users.find((u)=>u.user_id === roster.owner_id);\n            if (user) {\n                rosterToTeamMap.set(roster.roster_id.toString(), user.display_name);\n            }\n        });\n        console.log(\"MockoSheet data available:\", draftAnalysisData.mockoSheetData?.length || 0);\n        // Debug: Show sample MockoSheet tier data for each position\n        if (draftAnalysisData.mockoSheetData && draftAnalysisData.mockoSheetData.length > 0) {\n            const positions = [\n                \"QB\",\n                \"RB\",\n                \"WR\",\n                \"TE\",\n                \"K\",\n                \"DEF\"\n            ];\n            positions.forEach((pos)=>{\n                const topPlayers = draftAnalysisData.mockoSheetData.filter((p)=>p.position === pos).sort((a, b)=>a.posRank - b.posRank).slice(0, 3);\n                console.log(`Top 3 ${pos} players in MockoSheet:`, topPlayers.map((p)=>`${p.player} (Rank: ${p.posRank}, Tier: ${p.posTier})`).join(\", \"));\n            });\n        }\n        // Use the existing PlayerMatcher for consistent player matching\n        const playerMatcher = new _lib_player_matching_matcher__WEBPACK_IMPORTED_MODULE_2__.PlayerMatcher(draftAnalysisData.mockoSheetData || [], players);\n        // Group draft picks by team\n        const teamPicks = new Map();\n        draftAnalysisData.allPicks.forEach((pick)=>{\n            // Find the roster_id for this team\n            const rosterId = Array.from(rosterToTeamMap.entries()).find(([_, teamName])=>teamName === pick.team)?.[0];\n            if (rosterId) {\n                if (!teamPicks.has(rosterId)) {\n                    teamPicks.set(rosterId, []);\n                }\n                teamPicks.get(rosterId).push(pick);\n            }\n        });\n        console.log(\"Team picks mapping:\");\n        teamPicks.forEach((picks, rosterId)=>{\n            const teamName = rosterToTeamMap.get(rosterId);\n            console.log(`${teamName} (${rosterId}): ${picks.length} picks`);\n        });\n        // Calculate team tier data\n        const teamTierData = [];\n        console.log(\"Processing teams:\", rosters.length);\n        console.log(\"Draft picks available:\", draftAnalysisData.allPicks.length);\n        rosters.forEach((roster, index)=>{\n            const teamName = rosterToTeamMap.get(roster.roster_id.toString());\n            if (!teamName) {\n                console.log(`Skipping roster ${roster.roster_id} - no team name found`);\n                return;\n            }\n            try {\n                console.log(`Processing team ${index + 1}/${rosters.length}: ${teamName}`);\n                const teamPicksList = teamPicks.get(roster.roster_id.toString()) || [];\n                console.log(`Team ${teamName} has ${teamPicksList.length} draft picks`);\n                // Get current roster players and match with MockoSheet data using existing PlayerMatcher\n                const currentRosterPlayers = [];\n                if (roster.players && Array.isArray(roster.players)) {\n                    roster.players.forEach((playerId)=>{\n                        const player = players[playerId];\n                        if (player && player.first_name && player.last_name && player.position) {\n                            // Use the existing PlayerMatcher for consistent matching\n                            const mockoPlayer = playerMatcher.findMatch(playerId, player.position);\n                            currentRosterPlayers.push({\n                                pickNumber: 0,\n                                playerName: `${player.first_name} ${player.last_name}`,\n                                position: player.position,\n                                team: teamName,\n                                expertRank: mockoPlayer ? mockoPlayer.ecr : 0,\n                                adp: mockoPlayer ? mockoPlayer.adp : 0,\n                                actualPick: 0,\n                                reach: 0,\n                                valAdpScore: mockoPlayer ? mockoPlayer.valAdp : \"N/A\",\n                                tier: mockoPlayer ? mockoPlayer.posTier : \"N/A\",\n                                valScore: mockoPlayer ? mockoPlayer.val : 0,\n                                playoffShare: mockoPlayer ? mockoPlayer.ps : \"N/A\",\n                                isValuePick: false,\n                                isReach: false\n                            });\n                        }\n                    });\n                }\n                console.log(`Team ${teamName} has ${currentRosterPlayers.length} current roster players`);\n                // Show matching statistics\n                const matchedPlayers = currentRosterPlayers.filter((p)=>p.tier !== \"N/A\");\n                const unmatchedPlayers = currentRosterPlayers.filter((p)=>p.tier === \"N/A\");\n                console.log(`  - Matched with tier data: ${matchedPlayers.length}, No tier data: ${unmatchedPlayers.length}`);\n                // Combine draft picks and current roster players, removing duplicates\n                const allTeamPlayers = [\n                    ...teamPicksList\n                ];\n                // Add current roster players that aren't already in draft picks\n                currentRosterPlayers.forEach((rosterPlayer)=>{\n                    const isDuplicate = teamPicksList.some((draftPlayer)=>draftPlayer.playerName === rosterPlayer.playerName && draftPlayer.position === rosterPlayer.position);\n                    if (!isDuplicate) {\n                        allTeamPlayers.push(rosterPlayer);\n                    }\n                });\n                // Group all players by position\n                const positionGroups = new Map();\n                allTeamPlayers.forEach((player)=>{\n                    if (!positionGroups.has(player.position)) {\n                        positionGroups.set(player.position, []);\n                    }\n                    positionGroups.get(player.position).push(player);\n                });\n                // Define starter requirements for each position\n                const starterRequirements = {\n                    QB: 1,\n                    RB: 2,\n                    WR: 2,\n                    TE: 1,\n                    K: 1,\n                    DEF: 1\n                };\n                // Calculate position tier data with weighted averages\n                const positionTiers = {};\n                const positions = [\n                    \"QB\",\n                    \"RB\",\n                    \"WR\",\n                    \"TE\",\n                    \"K\",\n                    \"DEF\"\n                ];\n                positions.forEach((position)=>{\n                    const positionPicks = positionGroups.get(position) || [];\n                    if (positionPicks.length > 0) {\n                        const draftPicks = positionPicks.filter((p)=>p.pickNumber > 0);\n                        const rosterPlayers = positionPicks.filter((p)=>p.pickNumber === 0);\n                        console.log(`${teamName} ${position}: ${draftPicks.length} draft picks, ${rosterPlayers.length} roster players`);\n                        // Debug: Show individual player tiers for this position\n                        if (positionPicks.length > 0) {\n                            console.log(`  - Player tiers for ${teamName} ${position}:`, positionPicks.map((p)=>`${p.playerName}: tier=\"${p.tier}\"`).join(\", \"));\n                        }\n                        // Parse tier values for all players\n                        const playersWithTiers = positionPicks.map((pick)=>{\n                            let tierValue = 0;\n                            // Handle different tier formats\n                            if (typeof pick.tier === \"number\") {\n                                tierValue = pick.tier;\n                            } else if (typeof pick.tier === \"string\") {\n                                // Handle N/A as 0 (worst tier)\n                                if (pick.tier === \"N/A\") {\n                                    tierValue = 0;\n                                } else {\n                                    // Parse tier from format like \"QB1\", \"TE2\", \"K3\" etc.\n                                    const tierMatch = pick.tier.match(/\\d+$/);\n                                    if (tierMatch) {\n                                        tierValue = parseInt(tierMatch[0], 10);\n                                    } else {\n                                        // Fallback: try to parse as regular number\n                                        const parsed = parseFloat(pick.tier);\n                                        tierValue = isNaN(parsed) ? 0 : parsed;\n                                    }\n                                }\n                            }\n                            return {\n                                ...pick,\n                                tierValue\n                            };\n                        }).filter((player)=>player.tierValue > 0) // Only include players with valid tier data\n                        .sort((a, b)=>a.tierValue - b.tierValue); // Sort by tier (lower is better)\n                        console.log(`${teamName} ${position} players with valid tiers:`, playersWithTiers.length);\n                        let averageTier = 10; // Default to worst tier\n                        if (playersWithTiers.length > 0) {\n                            const requiredStarters = starterRequirements[position];\n                            const actualStarters = Math.min(requiredStarters, playersWithTiers.length);\n                            const benchPlayers = Math.max(0, playersWithTiers.length - actualStarters);\n                            // Calculate weighted average: 70% weight for starters, 30% for bench\n                            let weightedSum = 0;\n                            let totalWeight = 0;\n                            if (actualStarters > 0) {\n                                const starterTiers = playersWithTiers.slice(0, actualStarters).map((p)=>p.tierValue);\n                                const starterAverage = starterTiers.reduce((sum, tier)=>sum + tier, 0) / starterTiers.length;\n                                weightedSum += starterAverage * 0.7 * actualStarters;\n                                totalWeight += 0.7 * actualStarters;\n                                console.log(`${teamName} ${position} starters (${actualStarters}): avg tier=${starterAverage.toFixed(2)}`);\n                            }\n                            if (benchPlayers > 0) {\n                                const benchTiers = playersWithTiers.slice(actualStarters).map((p)=>p.tierValue);\n                                const benchAverage = benchTiers.reduce((sum, tier)=>sum + tier, 0) / benchTiers.length;\n                                weightedSum += benchAverage * 0.3 * benchPlayers;\n                                totalWeight += 0.3 * benchPlayers;\n                                console.log(`${teamName} ${position} bench (${benchPlayers}): avg tier=${benchAverage.toFixed(2)}`);\n                            }\n                            averageTier = totalWeight > 0 ? weightedSum / totalWeight : 10;\n                            console.log(`${teamName} ${position} weighted average tier: ${averageTier.toFixed(2)}`);\n                        } else {\n                            // Fallback: assign tiers based on draft position (earlier picks = better tiers)\n                            const draftPositions = positionPicks.map((pick)=>pick.pickNumber).filter((pos)=>pos > 0);\n                            if (draftPositions.length > 0) {\n                                const avgDraftPosition = draftPositions.reduce((sum, pos)=>sum + pos, 0) / draftPositions.length;\n                                // Convert draft position to tier (1-10 scale)\n                                // Earlier picks (lower numbers) = better tiers (lower numbers)\n                                averageTier = Math.min(10, Math.max(1, Math.round(avgDraftPosition / 20) + 1));\n                            }\n                            console.log(`${teamName} ${position} using fallback tier calculation: avg draft pos=${draftPositions.length > 0 ? draftPositions.reduce((sum, pos)=>sum + pos, 0) / draftPositions.length : \"N/A\"}, calculated tier=${averageTier}`);\n                        }\n                        // Find best player (lowest tier number)\n                        const bestPlayer = positionPicks.filter((pick)=>{\n                            if (typeof pick.tier === \"number\") return pick.tier > 0;\n                            if (typeof pick.tier === \"string\") {\n                                if (pick.tier === \"N/A\") return false;\n                                const tierMatch = pick.tier.match(/\\d+$/);\n                                if (tierMatch) return parseInt(tierMatch[0], 10) > 0;\n                                const parsed = parseFloat(pick.tier);\n                                return !isNaN(parsed) && parsed > 0;\n                            }\n                            return false;\n                        }).sort((a, b)=>{\n                            const getTierValue = (pick)=>{\n                                if (typeof pick.tier === \"number\") return pick.tier;\n                                if (typeof pick.tier === \"string\") {\n                                    if (pick.tier === \"N/A\") return 999;\n                                    const tierMatch = pick.tier.match(/\\d+$/);\n                                    if (tierMatch) return parseInt(tierMatch[0], 10);\n                                    const parsed = parseFloat(pick.tier);\n                                    return isNaN(parsed) ? 999 : parsed;\n                                }\n                                return 999;\n                            };\n                            return getTierValue(a) - getTierValue(b);\n                        })[0] || null;\n                        positionTiers[position] = {\n                            position,\n                            players: positionPicks,\n                            averageTier,\n                            bestPlayer,\n                            totalPlayers: positionPicks.length\n                        };\n                    } else {\n                        // No players at this position\n                        positionTiers[position] = {\n                            position,\n                            players: [],\n                            averageTier: 10,\n                            bestPlayer: null,\n                            totalPlayers: 0\n                        };\n                    }\n                });\n                // Calculate overall tier score (weighted average)\n                const weights = {\n                    QB: 1.2,\n                    RB: 1.5,\n                    WR: 1.5,\n                    TE: 1.0,\n                    K: 0.3,\n                    DEF: 0.5\n                };\n                let weightedSum = 0;\n                let totalWeight = 0;\n                Object.entries(positionTiers).forEach(([position, data])=>{\n                    if (data.totalPlayers > 0) {\n                        weightedSum += data.averageTier * weights[position];\n                        totalWeight += weights[position];\n                    }\n                });\n                const overallTierScore = totalWeight > 0 ? weightedSum / totalWeight : 0;\n                teamTierData.push({\n                    teamName,\n                    rosterId: roster.roster_id.toString(),\n                    ownerId: roster.owner_id,\n                    positionTiers,\n                    overallTierScore\n                });\n            } catch (error) {\n                console.error(`Error processing team ${teamName || \"unknown\"}:`, error);\n            // Continue with other teams even if one fails\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: teamTierData\n        });\n    } catch (error) {\n        console.error(\"Error processing team tiers:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to process team tier data\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/team-tiers/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/player-matching/matcher.ts":
/*!********************************************!*\
  !*** ./src/lib/player-matching/matcher.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlayerMatcher: () => (/* binding */ PlayerMatcher)\n/* harmony export */ });\nclass PlayerMatcher {\n    constructor(mockoSheetPlayers, sleeperPlayers){\n        this.mockoSheetPlayers = [];\n        this.sleeperPlayers = {};\n        this.mockoSheetPlayers = mockoSheetPlayers;\n        this.sleeperPlayers = sleeperPlayers;\n    }\n    findMatch(playerId, position) {\n        const sleeperPlayer = this.sleeperPlayers[playerId];\n        if (!sleeperPlayer) return null;\n        const sleeperName = `${sleeperPlayer.first_name} ${sleeperPlayer.last_name}`;\n        const normalizedSleeperName = this.normalizeName(sleeperName);\n        // Try exact match first\n        let match = this.mockoSheetPlayers.find((player)=>{\n            const normalizedMockoName = this.normalizeName(player.player);\n            return normalizedMockoName === normalizedSleeperName && player.position === position;\n        });\n        if (match) return match;\n        // Try fuzzy matching\n        match = this.mockoSheetPlayers.find((player)=>{\n            const normalizedMockoName = this.normalizeName(player.player);\n            const similarity = this.calculateSimilarity(normalizedSleeperName, normalizedMockoName);\n            return similarity > 0.8 && player.position === position;\n        });\n        if (match) return match;\n        // Try matching by last name and position (for common names)\n        const sleeperLastName = this.normalizeName(sleeperPlayer.last_name);\n        match = this.mockoSheetPlayers.find((player)=>{\n            const mockoLastName = this.extractLastName(player.player);\n            const normalizedMockoLastName = this.normalizeName(mockoLastName);\n            return normalizedMockoLastName === sleeperLastName && player.position === position;\n        });\n        return match || null;\n    }\n    normalizeName(name) {\n        return name.toLowerCase().replace(/[^\\w\\s]/g, \"\") // Remove special characters\n        .replace(/\\s+/g, \" \") // Normalize spaces\n        .trim();\n    }\n    extractLastName(fullName) {\n        const parts = fullName.split(\" \");\n        return parts[parts.length - 1] || fullName;\n    }\n    calculateSimilarity(str1, str2) {\n        const longer = str1.length > str2.length ? str1 : str2;\n        const shorter = str1.length > str2.length ? str2 : str1;\n        if (longer.length === 0) return 1.0;\n        const editDistance = this.levenshteinDistance(longer, shorter);\n        return (longer.length - editDistance) / longer.length;\n    }\n    levenshteinDistance(str1, str2) {\n        const matrix = Array(str2.length + 1).fill(null).map(()=>Array(str1.length + 1).fill(null));\n        for(let i = 0; i <= str1.length; i++)matrix[0][i] = i;\n        for(let j = 0; j <= str2.length; j++)matrix[j][0] = j;\n        for(let j = 1; j <= str2.length; j++){\n            for(let i = 1; i <= str1.length; i++){\n                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n                matrix[j][i] = Math.min(matrix[j][i - 1] + 1, matrix[j - 1][i] + 1, matrix[j - 1][i - 1] + indicator // substitution\n                );\n            }\n        }\n        return matrix[str2.length][str1.length];\n    }\n    // Get all unmatched players for manual review\n    getUnmatchedPlayers(draftPicks) {\n        const unmatched = [];\n        draftPicks.forEach((pick)=>{\n            const match = this.findMatch(pick.player_id, pick.metadata?.position);\n            if (!match) {\n                const sleeperPlayer = this.sleeperPlayers[pick.player_id];\n                if (sleeperPlayer) {\n                    unmatched.push({\n                        playerId: pick.player_id,\n                        playerName: `${sleeperPlayer.first_name} ${sleeperPlayer.last_name}`,\n                        position: pick.metadata?.position || \"UNKNOWN\",\n                        team: pick.metadata?.team || \"UNKNOWN\"\n                    });\n                }\n            }\n        });\n        return unmatched;\n    }\n    // Get match statistics\n    getMatchStats(draftPicks) {\n        let matchedCount = 0;\n        draftPicks.forEach((pick)=>{\n            const match = this.findMatch(pick.player_id, pick.metadata?.position);\n            if (match) matchedCount++;\n        });\n        return {\n            totalPicks: draftPicks.length,\n            matchedPicks: matchedCount,\n            unmatchedPicks: draftPicks.length - matchedCount,\n            matchRate: draftPicks.length > 0 ? matchedCount / draftPicks.length * 100 : 0\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/player-matching/matcher.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/sleeper/api.ts":
/*!********************************!*\
  !*** ./src/lib/sleeper/api.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sleeperAPI: () => (/* binding */ sleeperAPI)\n/* harmony export */ });\nconst SLEEPER_BASE_URL = \"https://api.sleeper.app/v1\";\nclass SleeperAPI {\n    async fetch(endpoint) {\n        try {\n            const response = await fetch(`${SLEEPER_BASE_URL}${endpoint}`);\n            if (!response.ok) {\n                if (response.status === 429) {\n                    // Rate limit exceeded - implement retry with backoff\n                    await this.delay(1000);\n                    return this.fetch(endpoint);\n                }\n                // Provide more specific error messages\n                let errorMessage = `HTTP error! status: ${response.status}`;\n                switch(response.status){\n                    case 404:\n                        errorMessage = `Resource not found: ${endpoint}`;\n                        break;\n                    case 403:\n                        errorMessage = `Access forbidden: ${endpoint}`;\n                        break;\n                    case 500:\n                        errorMessage = `Sleeper API server error`;\n                        break;\n                    case 502:\n                    case 503:\n                    case 504:\n                        errorMessage = `Sleeper API temporarily unavailable`;\n                        break;\n                }\n                throw new Error(errorMessage);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(`Error fetching ${endpoint}:`, error);\n            throw error;\n        }\n    }\n    async delay(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    async getLeague(leagueId) {\n        return this.fetch(`/league/${leagueId}`);\n    }\n    async getRosters(leagueId) {\n        return this.fetch(`/league/${leagueId}/rosters`);\n    }\n    async getUsers(leagueId) {\n        return this.fetch(`/league/${leagueId}/users`);\n    }\n    async getMatchups(leagueId, week) {\n        return this.fetch(`/league/${leagueId}/matchups/${week}`);\n    }\n    async getAllMatchups(leagueId, maxWeeks = 18) {\n        const matchupsPromises = Array.from({\n            length: maxWeeks\n        }, (_, i)=>this.getMatchups(leagueId, i + 1));\n        return Promise.all(matchupsPromises);\n    }\n    async getPlayerStats(season, week) {\n        const endpoint = week ? `/stats/nfl/${season}/${week}?season_type=regular` : `/stats/nfl/${season}?season_type=regular`;\n        return this.fetch(endpoint);\n    }\n    async getPlayerProjections(season, week) {\n        return this.fetch(`/projections/nfl/${season}/${week}?season_type=regular`);\n    }\n    async getPlayers() {\n        return this.fetch(\"/players/nfl\");\n    }\n    async getNFLState() {\n        return this.fetch(\"/state/nfl\");\n    }\n    async getTransactions(leagueId, week) {\n        return this.fetch(`/league/${leagueId}/transactions/${week}`);\n    }\n    async getDrafts(leagueId) {\n        return this.fetch(`/league/${leagueId}/drafts`);\n    }\n    async getDraftPicks(draftId) {\n        return this.fetch(`/draft/${draftId}/picks`);\n    }\n}\nconst sleeperAPI = new SleeperAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUssQ0FBc0IsQ0FBQyxpQkFBaUIsRUFBRStCLE9BQU8sQ0FBQyxFQUFFWCxLQUFLLG9CQUFvQixDQUFDO0lBQ2pHO0lBRUEsTUFBTWEsYUFBcUQ7UUFDekQsT0FBTyxJQUFJLENBQUNqQyxLQUFLLENBQWdDO0lBQ25EO0lBRUEsTUFBTWtDLGNBQThFO1FBQ2xGLE9BQU8sSUFBSSxDQUFDbEMsS0FBSyxDQUF3RDtJQUMzRTtJQUVBLE1BQU1tQyxnQkFBZ0JuQixRQUFnQixFQUFFSSxJQUFZLEVBQWtCO1FBQ3BFLE9BQU8sSUFBSSxDQUFDcEIsS0FBSyxDQUFRLENBQUMsUUFBUSxFQUFFZ0IsU0FBUyxjQUFjLEVBQUVJLEtBQUssQ0FBQztJQUNyRTtJQUVBLE1BQU1nQixVQUFVcEIsUUFBZ0IsRUFBa0I7UUFDaEQsT0FBTyxJQUFJLENBQUNoQixLQUFLLENBQVEsQ0FBQyxRQUFRLEVBQUVnQixTQUFTLE9BQU8sQ0FBQztJQUN2RDtJQUVBLE1BQU1xQixjQUFjQyxPQUFlLEVBQWtCO1FBQ25ELE9BQU8sSUFBSSxDQUFDdEMsS0FBSyxDQUFRLENBQUMsT0FBTyxFQUFFc0MsUUFBUSxNQUFNLENBQUM7SUFDcEQ7QUFDRjtBQUVPLE1BQU1DLGFBQWEsSUFBSXhDLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mYW50YXN5LWRhc2hib2FyZC8uL3NyYy9saWIvc2xlZXBlci9hcGkudHM/OGYwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTbGVlcGVyTGVhZ3VlLCBTbGVlcGVyUm9zdGVyLCBTbGVlcGVyVXNlciwgU2xlZXBlclBsYXllciwgU2xlZXBlck1hdGNodXAgfSBmcm9tICdAL3R5cGVzJztcblxuY29uc3QgU0xFRVBFUl9CQVNFX1VSTCA9ICdodHRwczovL2FwaS5zbGVlcGVyLmFwcC92MSc7XG5cbmNsYXNzIFNsZWVwZXJBUEkge1xuICBwcml2YXRlIGFzeW5jIGZldGNoPFQ+KGVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtTTEVFUEVSX0JBU0VfVVJMfSR7ZW5kcG9pbnR9YCk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgICAgLy8gUmF0ZSBsaW1pdCBleGNlZWRlZCAtIGltcGxlbWVudCByZXRyeSB3aXRoIGJhY2tvZmZcbiAgICAgICAgICBhd2FpdCB0aGlzLmRlbGF5KDEwMDApO1xuICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKGVuZHBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUHJvdmlkZSBtb3JlIHNwZWNpZmljIGVycm9yIG1lc3NhZ2VzXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgSFRUUCBlcnJvciEgc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoIChyZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgICAgICBjYXNlIDQwNDpcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGBSZXNvdXJjZSBub3QgZm91bmQ6ICR7ZW5kcG9pbnR9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNDAzOlxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gYEFjY2VzcyBmb3JiaWRkZW46ICR7ZW5kcG9pbnR9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gYFNsZWVwZXIgQVBJIHNlcnZlciBlcnJvcmA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDUwMjpcbiAgICAgICAgICBjYXNlIDUwMzpcbiAgICAgICAgICBjYXNlIDUwNDpcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGBTbGVlcGVyIEFQSSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nICR7ZW5kcG9pbnR9OmAsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZGVsYXkobXM6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbiAgfVxuXG4gIGFzeW5jIGdldExlYWd1ZShsZWFndWVJZDogc3RyaW5nKTogUHJvbWlzZTxTbGVlcGVyTGVhZ3VlPiB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8U2xlZXBlckxlYWd1ZT4oYC9sZWFndWUvJHtsZWFndWVJZH1gKTtcbiAgfVxuXG4gIGFzeW5jIGdldFJvc3RlcnMobGVhZ3VlSWQ6IHN0cmluZyk6IFByb21pc2U8U2xlZXBlclJvc3RlcltdPiB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8U2xlZXBlclJvc3RlcltdPihgL2xlYWd1ZS8ke2xlYWd1ZUlkfS9yb3N0ZXJzYCk7XG4gIH1cblxuICBhc3luYyBnZXRVc2VycyhsZWFndWVJZDogc3RyaW5nKTogUHJvbWlzZTxTbGVlcGVyVXNlcltdPiB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8U2xlZXBlclVzZXJbXT4oYC9sZWFndWUvJHtsZWFndWVJZH0vdXNlcnNgKTtcbiAgfVxuXG4gIGFzeW5jIGdldE1hdGNodXBzKGxlYWd1ZUlkOiBzdHJpbmcsIHdlZWs6IG51bWJlcik6IFByb21pc2U8U2xlZXBlck1hdGNodXBbXT4ge1xuICAgIHJldHVybiB0aGlzLmZldGNoPFNsZWVwZXJNYXRjaHVwW10+KGAvbGVhZ3VlLyR7bGVhZ3VlSWR9L21hdGNodXBzLyR7d2Vla31gKTtcbiAgfVxuXG4gIGFzeW5jIGdldEFsbE1hdGNodXBzKGxlYWd1ZUlkOiBzdHJpbmcsIG1heFdlZWtzOiBudW1iZXIgPSAxOCk6IFByb21pc2U8U2xlZXBlck1hdGNodXBbXVtdPiB7XG4gICAgY29uc3QgbWF0Y2h1cHNQcm9taXNlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IG1heFdlZWtzIH0sIChfLCBpKSA9PiBcbiAgICAgIHRoaXMuZ2V0TWF0Y2h1cHMobGVhZ3VlSWQsIGkgKyAxKVxuICAgICk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKG1hdGNodXBzUHJvbWlzZXMpO1xuICB9XG5cbiAgYXN5bmMgZ2V0UGxheWVyU3RhdHMoc2Vhc29uOiBzdHJpbmcsIHdlZWs/OiBudW1iZXIpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIGFueT4+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IHdlZWsgXG4gICAgICA/IGAvc3RhdHMvbmZsLyR7c2Vhc29ufS8ke3dlZWt9P3NlYXNvbl90eXBlPXJlZ3VsYXJgXG4gICAgICA6IGAvc3RhdHMvbmZsLyR7c2Vhc29ufT9zZWFzb25fdHlwZT1yZWd1bGFyYDtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxSZWNvcmQ8c3RyaW5nLCBhbnk+PihlbmRwb2ludCk7XG4gIH1cblxuICBhc3luYyBnZXRQbGF5ZXJQcm9qZWN0aW9ucyhzZWFzb246IHN0cmluZywgd2VlazogbnVtYmVyKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBhbnk+PiB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8UmVjb3JkPHN0cmluZywgYW55Pj4oYC9wcm9qZWN0aW9ucy9uZmwvJHtzZWFzb259LyR7d2Vla30/c2Vhc29uX3R5cGU9cmVndWxhcmApO1xuICB9XG5cbiAgYXN5bmMgZ2V0UGxheWVycygpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIFNsZWVwZXJQbGF5ZXI+PiB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8UmVjb3JkPHN0cmluZywgU2xlZXBlclBsYXllcj4+KCcvcGxheWVycy9uZmwnKTtcbiAgfVxuXG4gIGFzeW5jIGdldE5GTFN0YXRlKCk6IFByb21pc2U8eyB3ZWVrOiBudW1iZXI7IHNlYXNvbjogc3RyaW5nOyBzZWFzb25fdHlwZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDx7IHdlZWs6IG51bWJlcjsgc2Vhc29uOiBzdHJpbmc7IHNlYXNvbl90eXBlOiBzdHJpbmcgfT4oJy9zdGF0ZS9uZmwnKTtcbiAgfVxuXG4gIGFzeW5jIGdldFRyYW5zYWN0aW9ucyhsZWFndWVJZDogc3RyaW5nLCB3ZWVrOiBudW1iZXIpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2g8YW55W10+KGAvbGVhZ3VlLyR7bGVhZ3VlSWR9L3RyYW5zYWN0aW9ucy8ke3dlZWt9YCk7XG4gIH1cblxuICBhc3luYyBnZXREcmFmdHMobGVhZ3VlSWQ6IHN0cmluZyk6IFByb21pc2U8YW55W10+IHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxhbnlbXT4oYC9sZWFndWUvJHtsZWFndWVJZH0vZHJhZnRzYCk7XG4gIH1cblxuICBhc3luYyBnZXREcmFmdFBpY2tzKGRyYWZ0SWQ6IHN0cmluZyk6IFByb21pc2U8YW55W10+IHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaDxhbnlbXT4oYC9kcmFmdC8ke2RyYWZ0SWR9L3BpY2tzYCk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNsZWVwZXJBUEkgPSBuZXcgU2xlZXBlckFQSSgpO1xuIl0sIm5hbWVzIjpbIlNMRUVQRVJfQkFTRV9VUkwiLCJTbGVlcGVyQVBJIiwiZmV0Y2giLCJlbmRwb2ludCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXMiLCJkZWxheSIsImVycm9yTWVzc2FnZSIsIkVycm9yIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsIm1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZ2V0TGVhZ3VlIiwibGVhZ3VlSWQiLCJnZXRSb3N0ZXJzIiwiZ2V0VXNlcnMiLCJnZXRNYXRjaHVwcyIsIndlZWsiLCJnZXRBbGxNYXRjaHVwcyIsIm1heFdlZWtzIiwibWF0Y2h1cHNQcm9taXNlcyIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsIl8iLCJpIiwiYWxsIiwiZ2V0UGxheWVyU3RhdHMiLCJzZWFzb24iLCJnZXRQbGF5ZXJQcm9qZWN0aW9ucyIsImdldFBsYXllcnMiLCJnZXRORkxTdGF0ZSIsImdldFRyYW5zYWN0aW9ucyIsImdldERyYWZ0cyIsImdldERyYWZ0UGlja3MiLCJkcmFmdElkIiwic2xlZXBlckFQSSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/sleeper/api.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fteam-tiers%2Froute&page=%2Fapi%2Fteam-tiers%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fteam-tiers%2Froute.ts&appDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Farnav%2FDocuments%2FFF%20Metrics&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();